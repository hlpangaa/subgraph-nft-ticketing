// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractCreated extends ethereum.Event {
  get params(): ContractCreated__Params {
    return new ContractCreated__Params(this);
  }
}

export class ContractCreated__Params {
  _event: ContractCreated;

  constructor(event: ContractCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ContractDisabled extends ethereum.Event {
  get params(): ContractDisabled__Params {
    return new ContractDisabled__Params(this);
  }
}

export class ContractDisabled__Params {
  _event: ContractDisabled;

  constructor(event: ContractDisabled) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EventFactory extends ethereum.SmartContract {
  static bind(address: Address): EventFactory {
    return new EventFactory("EventFactory", address);
  }

  deposit(): BigInt {
    let result = super.call("deposit", "deposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(param0: Address): boolean {
    let result = super.call("exists", "exists(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_exists(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  marketplace(): Address {
    let result = super.call("marketplace", "marketplace():(address)", []);

    return result[0].toAddress();
  }

  try_marketplace(): ethereum.CallResult<Address> {
    let result = super.tryCall("marketplace", "marketplace():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _marketplace(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _deposit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateNFTContractCall extends ethereum.Call {
  get inputs(): CreateNFTContractCall__Inputs {
    return new CreateNFTContractCall__Inputs(this);
  }

  get outputs(): CreateNFTContractCall__Outputs {
    return new CreateNFTContractCall__Outputs(this);
  }
}

export class CreateNFTContractCall__Inputs {
  _call: CreateNFTContractCall;

  constructor(call: CreateNFTContractCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _contractURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _supplyCap(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _mintFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _priceCellingFraction(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _royaltyFeesInBips(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateNFTContractCall__Outputs {
  _call: CreateNFTContractCall;

  constructor(call: CreateNFTContractCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DisableTokenContractCall extends ethereum.Call {
  get inputs(): DisableTokenContractCall__Inputs {
    return new DisableTokenContractCall__Inputs(this);
  }

  get outputs(): DisableTokenContractCall__Outputs {
    return new DisableTokenContractCall__Outputs(this);
  }
}

export class DisableTokenContractCall__Inputs {
  _call: DisableTokenContractCall;

  constructor(call: DisableTokenContractCall) {
    this._call = call;
  }

  get tokenContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableTokenContractCall__Outputs {
  _call: DisableTokenContractCall;

  constructor(call: DisableTokenContractCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
